#!/usr/bin/env python

# CAVEAT UTILITOR
#
# This file was automatically generated by TatSu.
#
#    https://pypi.python.org/pypi/tatsu/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.

from __future__ import annotations

import sys

from tatsu.buffering import Buffer
from tatsu.parsing import Parser
from tatsu.parsing import tatsumasu
from tatsu.parsing import leftrec, nomemo, isname # noqa
from tatsu.infos import ParserConfig
from tatsu.util import re, generic_main  # noqa


KEYWORDS = {}  # type: ignore


class LadyBuffer(Buffer):
    def __init__(self, text, /, config: ParserConfig = None, **settings):
        config = ParserConfig.new(
            config,
            owner=self,
            whitespace=re.compile('[\\t ]+'),
            nameguard=None,
            comments_re=None,
            eol_comments_re=None,
            ignorecase=False,
            namechars='',
            parseinfo=False,
        )
        config = config.replace(**settings)
        super().__init__(text, config=config)


class LadyParser(Parser):
    def __init__(self, /, config: ParserConfig = None, **settings):
        config = ParserConfig.new(
            config,
            owner=self,
            whitespace=re.compile('[\\t ]+'),
            nameguard=None,
            comments_re=None,
            eol_comments_re=None,
            ignorecase=False,
            namechars='',
            parseinfo=False,
            keywords=KEYWORDS,
            start='start',
        )
        config = config.replace(**settings)
        super().__init__(config=config)

    @tatsumasu()
    def _start_(self):  # noqa
        self._name_()

        def block0():
            self._object_()
        self._positive_closure(block0)

        def block1():
            self._predicate_()
        self._positive_closure(block1)
        self._rule_section_()

    @tatsumasu()
    def _name_(self):  # noqa
        self._token('name:')
        self._pattern('[^\\n]+')

        def block0():
            self._token('\n')
        self._closure(block0)

    @tatsumasu()
    def _object_(self):  # noqa
        self._token('object')
        self._id_()
        self._token(':')

        def block0():
            self._token('\n')
        self._positive_closure(block0)

        def block1():
            self._id_()

            def block2():
                self._token('\n')
            self._positive_closure(block2)
        self._positive_closure(block1)

    @tatsumasu()
    def _id_(self):  # noqa
        self._pattern('[A-Za-z0-9_]+')

    @tatsumasu()
    def _predicate_(self):  # noqa
        self._token('predicate')
        self._id_()
        self._token('(')

        def sep0():
            self._token(',')

        def block0():
            self._id_()
        self._positive_join(block0, sep0)
        self._token(')')

        def block1():
            self._token('\n')
        self._positive_closure(block1)

    @tatsumasu()
    def _rule_section_(self):  # noqa
        self._token('rules:')

        def block0():
            self._token('\n')
        self._closure(block0)

        def block1():
            self._rule_()
        self._positive_closure(block1)

    @tatsumasu()
    def _rule_(self):  # noqa
        self._expression_()

        def block0():
            self._token('\n')
        self._positive_closure(block0)

    @tatsumasu()
    def _expression_(self):  # noqa
        with self._choice():
            with self._option():
                self._term_()
                self._token('and')
                self._expression_()
            with self._option():
                self._term_()
                self._token('or')
                self._expression_()
            with self._option():
                self._term_()
                self._token('=>')
                self._expression_()
            with self._option():
                self._term_()
                self._token('<=>')
                self._expression_()
            with self._option():
                self._term_()
            self._error(
                'expecting one of: '
                "'!' '(' 'for every' 'solvable if' 'there"
                "is a' <applied_predicate> <term>"
            )

    @tatsumasu()
    def _term_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('for every')
                self._id_()
                self._id_()
                with self._optional():
                    self._token('except')
                    self._id_()
                self._token('(')
                self._expression_()
                self._token(')')
            with self._option():
                self._token('there is a')
                self._id_()
                self._id_()
                with self._optional():
                    self._token('except')
                    self._id_()
                self._token('(')
                self._expression_()
                self._token(')')
            with self._option():
                self._token('solvable if')
                self._token('(')
                self._expression_()
                self._token(')')
                self._token('is known')
            with self._option():
                self._token('(')
                self._expression_()
                self._token(')')
            with self._option():
                self._token('!')
                self._expression_()
            with self._option():
                self._applied_predicate_()
            self._error(
                'expecting one of: '
                "'!' '(' 'for every' 'solvable if' 'there"
                "is a' <applied_predicate> <id>"
                '[A-Za-z0-9_]+'
            )

    @tatsumasu()
    def _applied_predicate_(self):  # noqa
        self._id_()
        self._token('(')

        def sep0():
            self._token(',')

        def block0():
            self._id_()
        self._positive_join(block0, sep0)
        self._token(')')


class LadySemantics:
    def start(self, ast):  # noqa
        return ast

    def name(self, ast):  # noqa
        return ast

    def object(self, ast):  # noqa
        return ast

    def id(self, ast):  # noqa
        return ast

    def predicate(self, ast):  # noqa
        return ast

    def rule_section(self, ast):  # noqa
        return ast

    def rule(self, ast):  # noqa
        return ast

    def expression(self, ast):  # noqa
        return ast

    def term(self, ast):  # noqa
        return ast

    def applied_predicate(self, ast):  # noqa
        return ast


def main(filename, **kwargs):
    if not filename or filename == '-':
        text = sys.stdin.read()
    else:
        with open(filename) as f:
            text = f.read()
    parser = LadyParser()
    return parser.parse(
        text,
        filename=filename,
        **kwargs
    )


if __name__ == '__main__':
    import json
    from tatsu.util import asjson

    ast = generic_main(main, LadyParser, name='Lady')
    data = asjson(ast)
    print(json.dumps(data, indent=2))
